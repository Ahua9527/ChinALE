"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/ale.ts":
/*!**************************!*\
  !*** ./src/utils/ale.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALEConverter: () => (/* binding */ ALEConverter),\n/* harmony export */   ALEError: () => (/* binding */ ALEError)\n/* harmony export */ });\n/**\n * ALE (Avid Log Exchange) 文件编码转换工具\n */ // 自定义错误类型\nclass ALEError extends Error {\n    constructor(message, errorType){\n        super(message), this.errorType = errorType;\n        this.name = 'ALEError';\n    }\n}\nclass ALEConverter {\n    /**\n   * 将UTF-8编码的ALE文件内容转换为GBK编码\n   */ static async convertToGBK(file) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const finalOptions = {\n            ...this.DEFAULT_OPTIONS,\n            ...options\n        };\n        try {\n            // 检查文件大小\n            if (file.size > finalOptions.maxFileSize) {\n                throw new ALEError(\"文件大小超过限制: \".concat(file.size, \" bytes\"), 'FILE_SIZE');\n            }\n            // 验证文件格式\n            if (!await this.validateALEFile(file)) {\n                throw new ALEError('无效的ALE文件格式', 'FORMAT');\n            }\n            // 读取文件内容\n            const buffer = await this.readFileWithProgress(file, finalOptions.onProgress);\n            const text = await this.decodeUTF8(buffer);\n            // 解析ALE文件结构\n            const aleData = await this.parseALEFile(text);\n            // 序列化并转换编码\n            const serializedText = this.serializeALEFile(aleData);\n            // 这里应该使用专门的编码转换库，这里用简化实现作为示例\n            const gbkBuffer = await this.convertToGBKEncoding(serializedText, finalOptions);\n            return new Blob([\n                gbkBuffer\n            ], {\n                type: 'text/plain;charset=gbk'\n            });\n        } catch (error) {\n            if (error instanceof ALEError) {\n                throw error;\n            }\n            throw new ALEError(\"ALE文件转换失败: \".concat(error instanceof Error ? error.message : '未知错误'), 'ENCODING');\n        }\n    }\n    /**\n   * 使用进度回调读取文件\n   */ static async readFileWithProgress(file, onProgress) {\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.onprogress = (event)=>{\n                if (event.lengthComputable) {\n                    onProgress(event.loaded / event.total);\n                }\n            };\n            reader.onload = ()=>resolve(reader.result);\n            reader.onerror = ()=>reject(new ALEError('文件读取失败', 'READ_ERROR'));\n            reader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n   * UTF-8解码\n   */ static async decodeUTF8(buffer) {\n        try {\n            const decoder = new TextDecoder('utf-8', {\n                fatal: true\n            });\n            return decoder.decode(buffer);\n        } catch (error) {\n            throw new ALEError('UTF-8解码失败', 'ENCODING');\n        }\n    }\n    /**\n   * 解析ALE文件内容\n   */ static async parseALEFile(text) {\n        const lines = text.split('\\n').filter((line)=>line.trim() !== '');\n        if (lines.length < 3) {\n            throw new ALEError('文件格式无效：行数不足', 'FORMAT');\n        }\n        const header = lines[0];\n        if (!header.startsWith('FIELD_DELIM')) {\n            throw new ALEError('文件格式无效：缺少必要的头信息', 'FORMAT');\n        }\n        const columnHeaders = lines[1].split('\\t');\n        if (columnHeaders.length < 2) {\n            throw new ALEError('文件格式无效：列头格式错误', 'FORMAT');\n        }\n        const data = lines.slice(2).map((line)=>{\n            const row = line.split('\\t');\n            if (row.length !== columnHeaders.length) {\n                throw new ALEError('数据行列数与列头不匹配', 'FORMAT');\n            }\n            return row;\n        });\n        return {\n            header,\n            columnHeaders,\n            data\n        };\n    }\n    /**\n   * 转换为GBK编码\n   * 注意：这是简化实现，实际应该使用专门的编码转换库\n   */ static async convertToGBKEncoding(text, options) {\n        // 这里应该使用专门的编码转换库\n        // 下面是简化实现，仅作示例\n        const buffer = new Uint8Array(text.length * 2); // 预留足够空间\n        let offset = 0;\n        for(let i = 0; i < text.length; i++){\n            const char = text.charAt(i);\n            const code = text.charCodeAt(i);\n            if (code <= 0x7F) {\n                // ASCII\n                buffer[offset++] = code;\n            } else {\n                // 非ASCII字符\n                switch(options.errorStrategy){\n                    case 'SKIP':\n                        continue;\n                    case 'REPLACE':\n                        buffer[offset++] = options.replacementChar.charCodeAt(0);\n                        break;\n                    case 'THROW':\n                        throw new ALEError(\"无法转换字符: \".concat(char, \" (\").concat(code.toString(16), \")\"), 'ENCODING');\n                }\n            }\n        }\n        return buffer.slice(0, offset);\n    }\n    /**\n   * 验证ALE文件格式\n   */ static async validateALEFile(file) {\n        // 检查文件扩展名\n        if (!file.name.toLowerCase().endsWith('.ale')) {\n            return false;\n        }\n        try {\n            const buffer = await file.arrayBuffer();\n            const text = new TextDecoder('utf-8').decode(buffer);\n            const lines = text.split('\\n').filter((line)=>line.trim() !== '');\n            // 基本格式验证\n            if (lines.length < 3 || !lines[0].startsWith('FIELD_DELIM')) {\n                return false;\n            }\n            // 验证列头\n            const columnHeaders = lines[1].split('\\t');\n            if (columnHeaders.length < 2) {\n                return false;\n            }\n            // 验证数据行\n            const isValidDataRow = (row)=>{\n                const columns = row.split('\\t');\n                return columns.length === columnHeaders.length;\n            };\n            return lines.slice(2).every(isValidDataRow);\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n   * 序列化ALE文件\n   */ static serializeALEFile(aleData) {\n        return [\n            aleData.header,\n            aleData.columnHeaders.join('\\t'),\n            ...aleData.data.map((row)=>row.join('\\t'))\n        ].join('\\n');\n    }\n}\nALEConverter.DEFAULT_OPTIONS = {\n    maxFileSize: 50 * 1024 * 1024,\n    onProgress: ()=>{},\n    errorStrategy: 'REPLACE',\n    replacementChar: '?'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/ale.ts\n"));

/***/ })

});