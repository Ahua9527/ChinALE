"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/ale.ts":
/*!**************************!*\
  !*** ./src/utils/ale.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALEConverter: () => (/* binding */ ALEConverter)\n/* harmony export */ });\n/**\n * ALE (Avid Log Exchange) 文件编码转换工具\n */ class ALEConverter {\n    /**\n   * 将UTF-8编码的ALE文件内容转换为GBK编码\n   * @param file - 要转换的File对象\n   * @returns 转换后的Blob对象\n   */ static async convertToGBK(file) {\n        try {\n            // 读取文件内容\n            const buffer = await file.arrayBuffer();\n            // 将UTF-8解码为字符串\n            const utf8Decoder = new TextDecoder('utf-8');\n            const text = utf8Decoder.decode(buffer);\n            // 解析ALE文件结构\n            const aleData = this.parseALEFile(text);\n            // 将数据转换为GBK编码\n            const serializedText = this.serializeALEFile(aleData);\n            // 使用TextDecoder进行GBK编码\n            const gbkBuffer = new Uint8Array(serializedText.length);\n            for(let i = 0; i < serializedText.length; i++){\n                const charCode = serializedText.charCodeAt(i);\n                // 处理ASCII范围\n                if (charCode <= 0x7F) {\n                    gbkBuffer[i] = charCode;\n                } else {\n                    // 处理中文字符（GBK双字节编码）\n                    const char = serializedText.charAt(i);\n                    const nextChar = serializedText.charAt(i + 1);\n                    if (charCode >= 0xA1 && charCode <= 0xF7 && nextChar && nextChar.charCodeAt(0) >= 0xA1 && nextChar.charCodeAt(0) <= 0xFE) {\n                        // GB2312双字节字符\n                        gbkBuffer[i] = charCode;\n                        gbkBuffer[i + 1] = nextChar.charCodeAt(0);\n                        i++; // 跳过下一个字节\n                    } else {\n                        // 无法识别的字符，使用默认替换字符\n                        gbkBuffer[i] = 0x3F; // '?'\n                    }\n                }\n            }\n            return new Blob([\n                gbkBuffer\n            ], {\n                type: 'text/plain;charset=gbk'\n            });\n        } catch (error) {\n            throw new Error(\"ALE文件转换失败: \".concat(error instanceof Error ? error.message : '未知错误'));\n        }\n    }\n    /**\n   * 解析ALE文件内容\n   * @param text - ALE文件文本内容\n   * @returns 解析后的ALE文件对象\n   */ static parseALEFile(text) {\n        const lines = text.split('\\n').filter((line)=>line.trim() !== '');\n        // 解析头部\n        const header = lines[0];\n        // 解析列头\n        const columnHeaders = lines[1].split('\\t');\n        // 解析数据行\n        const data = lines.slice(2).map((line)=>line.split('\\t'));\n        return {\n            header,\n            columnHeaders,\n            data\n        };\n    }\n    /**\n   * 将ALE文件对象序列化为字符串\n   * @param aleData - ALE文件对象\n   * @returns 序列化后的字符串\n   */ static serializeALEFile(aleData) {\n        const lines = [\n            aleData.header,\n            aleData.columnHeaders.join('\\t'),\n            ...aleData.data.map((row)=>row.join('\\t'))\n        ];\n        return lines.join('\\n');\n    }\n    /**\n   * 验证ALE文件格式\n   * @param file - 要验证的文件\n   * @returns 是否是有效的ALE文件\n   */ static async validateALEFile(file) {\n        try {\n            const buffer = await file.arrayBuffer();\n            const text = new TextDecoder('utf-8').decode(buffer);\n            const lines = text.split('\\n').filter((line)=>line.trim() !== '');\n            // 基本格式验证\n            return lines.length >= 3 && lines[0].startsWith('FIELD_DELIM') && lines[1].split('\\t').length > 1;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/ale.ts\n"));

/***/ })

});